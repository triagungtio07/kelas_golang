// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/triagungtio07/kelas_golang/models"

	utils "github.com/triagungtio07/kelas_golang/utils"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: book
func (_m *BookRepository) Delete(book *models.Book) error {
	ret := _m.Called(book)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Book) error); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: id
func (_m *BookRepository) Find(id uint64) (models.Book, error) {
	ret := _m.Called(id)

	var r0 models.Book
	if rf, ok := ret.Get(0).(func(uint64) models.Book); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByTitle provides a mock function with given fields: title
func (_m *BookRepository) FindByTitle(title string) (models.Book, error) {
	ret := _m.Called(title)

	var r0 models.Book
	if rf, ok := ret.Get(0).(func(string) models.Book); ok {
		r0 = rf(title)
	} else {
		r0 = ret.Get(0).(models.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPaginated provides a mock function with given fields: paginator
func (_m *BookRepository) FindPaginated(paginator utils.Paginator) (utils.Paginator, error) {
	ret := _m.Called(paginator)

	var r0 utils.Paginator
	if rf, ok := ret.Get(0).(func(utils.Paginator) utils.Paginator); ok {
		r0 = rf(paginator)
	} else {
		r0 = ret.Get(0).(utils.Paginator)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(utils.Paginator) error); ok {
		r1 = rf(paginator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: book
func (_m *BookRepository) Save(book *models.Book) error {
	ret := _m.Called(book)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Book) error); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
