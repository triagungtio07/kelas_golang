// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/triagungtio07/kelas_golang/models"

	utils "github.com/triagungtio07/kelas_golang/utils"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: user
func (_m *UserRepository) Delete(user *models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: id
func (_m *UserRepository) Find(id uint64) (models.User, error) {
	ret := _m.Called(id)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(uint64) models.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByEmail provides a mock function with given fields: email
func (_m *UserRepository) FindByEmail(email string) (models.User, error) {
	ret := _m.Called(email)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPaginated provides a mock function with given fields: paginator
func (_m *UserRepository) FindPaginated(paginator utils.Paginator) (utils.Paginator, error) {
	ret := _m.Called(paginator)

	var r0 utils.Paginator
	if rf, ok := ret.Get(0).(func(utils.Paginator) utils.Paginator); ok {
		r0 = rf(paginator)
	} else {
		r0 = ret.Get(0).(utils.Paginator)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(utils.Paginator) error); ok {
		r1 = rf(paginator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: user
func (_m *UserRepository) Save(user *models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
